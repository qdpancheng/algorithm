/*************************************************
// Method: InsertionSort
// Description: low--->high
// Author: pancheng
// Date: 2016/04/03
// Returns: Rsort
// Parameter: a
// History:
*************************************************/
template <typename Rsort>
void InsertionSort(vector<Rsort> &a)
{
	for (int j = 1; j != a.size(); ++j)
	{
		Rsort temp = a[j];
		int i;
		for (i = j-1; i >= 0 && temp < a[i]; --i)
		{
			a[i + 1] = a[i];
		}
		a[i+1] = temp;
	}
}


/*************************************************
// Method: BubbleSort
// Description: 冒泡排序两两比较，将大的数据“沉”下去，外层循环要经过n-1次
// Author: pancheng
// Date: 2016/04/11
// Returns: void
// Parameter: a
// History:
*************************************************/
template <typename Rsort>
void BubbleSort(vector<Rsort> &a)
{
	int len = a.size();
	for (int i = 0; i < len-1; ++i)
	{
		for (int j = 0; j < len-1-i; ++j)
		{
			if (a[j] > a[j + 1])
			{
				swap(a[j], a[j + 1]);
			}
		}
	}
}


/*************************************************
// Method: SelectSrot
// Description: 选择排序，从无序序列中选取最小的放在当前位置，然后继续循环
// Author: pancheng
// Date: 2016/04/16
// Returns: void
// Parameter: a
// History:
*************************************************/
template<typename Rsort>
void SelectSrot(vector<Rsort> &a)
{
	int len = a.size();
	for (int i = 0; i < len; ++i)
	{
		int minindex = i;
		for (int j = i+1; j < len; ++j)
		{
			if (a[j] < a[minindex])
			{
				minindex = j;
			}
		}
		swap(a[i], a[minindex]);
	}
}



/*************************************************
// Method: ShellSort
// Description: shell排序又称缩减增量排序  low-->high
// Author: pancheng
// Date: 2016/04/15
// Returns: void
// Parameter: a
// History:可以优化
*************************************************/
template <typename Rsort>
void ShellSort(vector<Rsort> &a)
{
	int len = a.size();	//得到容器的大小
	for (int gap = len / 2; gap > 0; gap /= 2)			//得到排序的次数
	{
		for (int i = 0; i < gap; ++i)			//每次排序将序列分为gap组
		{
			for (int j = gap + i; j < len; j += gap)
			{
				//得到要排序的序列，下面使用插入排序
				if (a[j] < a[j - gap])
				{
					Rsort temp;
					temp = a[j];
					int k = j - gap;
					while (k >= 0 && a[k] > temp)		//将前面比a[j]小的数全部后移
					{
						a[k + gap] = a[k];
						k -= gap;
					}
					a[k + gap] = temp;
				}
			}
		}
	}
}


-----------------------------------------------------------------------------------------------------------------------------------
/*归并排序的思路：将数组分成两组A,B，如果这两组组内的数据都是
有序的，那么就可以很方便的将这两组数据排序。如何将两组组内数据
有序呢？-->可以将A,B组各自再分成两组。以此类推，当分出的小组只
有一个数据时，可以认为这个小组组内已经达到有序，然后合并相邻的
两个数组就可以。
*/
template <typename Rsort>
void MergeSort(vector<Rsort> &a)
{
	int len = a.size();
	//先分在合并
	Rsort *pTempArray = new Rsort[len];
	mergesort(a, 0, len - 1, pTempArray);
	delete[] pTempArray;
}

template <typename Rsort>
void mergesort(vector<Rsort> &a, int first, int last, Rsort temp[])
{
	if (first < last)
	{
		int mid = (first + last) / 2;
		mergesort(a, first, mid, temp);
		mergesort(a, mid + 1, last, temp);
		mergearray(a, first, mid, last, temp);
	}
}

//将两个有序数列合并
template <typename Rsort>
void mergearray(vector<Rsort> &a, int first, int mid, int last, Rsort temp[])
{
	int i = first, j = mid + 1;
	int k = 0;
	//若while循环结束则表示其中一个分组赋值完成
	while (i <= mid && j <= last)
	{
		if (a[i] < a[j])
		{
			temp[k++] = a[i++];
		} 
		else
		{
			temp[k++] = a[j++];
		}
	}
	while (i <= mid)
	{
		temp[k++] = a[i++];
	}
	while (j <= last)
	{
		temp[k++] = a[j++];
	}
	for (int i = 0; i < k; ++i)
	{
		a[i + first] = temp[i];
	}
}
--------------------------------------------------------------------------------------------------------------------------------------




/*************************************************
// Method: QuickSort
// Description: 快速排序采用的思想是分治思想。快速排序是找出一个元素（理论上可以随便找一个）
//				作为基准(pivot),然后对数组进行分区操作,使基准左边元素的值都不大于基准值,基
//				准右边的元素值 都不小于基准值，如此作为基准的元素调整到排序后的正确位置。
//				递归快速排序，将其他n-1个元素也调整到排序后的正确位置。最后每个元素都是在排序
//				后的正 确位置，排序完成。所以快速排序算法的核心算法是分区操作，即如何调整基准
//				的位置以及调整返回基准的最终位置以便分治递归。
// Author: pancheng
// Date: 2016/04/16
// Returns: void
// Parameter: a
// History:
*************************************************/
template <typename Rsort>
void QuickSort(vector<Rsort> &a, int left, int right)
{
	if (left < right)
	{
		int i = left, j = right;
		Rsort temp = a[left];
		while (i < j)
		{
			while (a[j] > temp && i < j)
			{
				--j;
			}
			if (i < j)
			{
				a[i++] = a[j];
			}
			while (a[i] < temp && i < j)
			{
				++i;
			}
			if (i < j)
			{
				a[j--] = a[i];
			}
		}
		//程序运行到此处说明 i==j
		a[i] = temp;
		QuickSort(a, left, i - 1);
		QuickSort(a, i + 1, right);
	}
}

